// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Synthbot.DAL;
using Synthbot.DAL.Models;

namespace Synthbot.WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("SynthbotUserId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SynthbotUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SynthbotUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("SynthbotUserId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("SynthbotUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SynthbotUserLoginProviders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("SynthbotUserId");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("SynthbotUserId");

                    b.ToTable("SynthbotUserTokens");
                });

            modelBuilder.Entity("Synthbot.DAL.Models.DiscordUser", b =>
                {
                    b.Property<string>("DiscordUserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DiscordEmailAddress");

                    b.Property<string>("DiscordUsername");

                    b.Property<DateTime>("InvitedTs");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("NoResponse");

                    b.HasKey("DiscordUserId");

                    b.HasIndex("DiscordUserId")
                        .IsUnique();

                    b.HasIndex("DiscordUsername");

                    b.ToTable("DiscordUsers");
                });

            modelBuilder.Entity("Synthbot.DAL.Models.PlaybackSession", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CurrentSongPlaybackId");

                    b.Property<string>("DiscordVoiceChannelId")
                        .IsRequired();

                    b.Property<string>("SpotifyPlaylistId")
                        .IsRequired();

                    b.Property<string>("UpdateChannelDiscordId");

                    b.HasKey("Id");

                    b.HasAlternateKey("DiscordVoiceChannelId");

                    b.HasIndex("CurrentSongPlaybackId");

                    b.HasIndex("DiscordVoiceChannelId")
                        .IsUnique();

                    b.ToTable("PlaybackSessions");
                });

            modelBuilder.Entity("Synthbot.DAL.Models.ReferralTokenReceipt", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Claimed");

                    b.Property<DateTime>("ClaimedTS");

                    b.Property<DateTime>("ReceivedTS");

                    b.Property<string>("ReferralUserId");

                    b.Property<string>("ReferrerSignalrUser");

                    b.Property<bool>("ReplyError");

                    b.Property<bool>("ReplySent");

                    b.Property<string>("SynthbotUserId");

                    b.HasKey("Id");

                    b.HasIndex("SynthbotUserId");

                    b.ToTable("ReferralTokenReceipts");
                });

            modelBuilder.Entity("Synthbot.DAL.Models.SongPlaybackTracker", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<TimeSpan>("Duration");

                    b.Property<string>("JobId");

                    b.Property<int?>("PausedAtMs");

                    b.Property<DateTime?>("PausedUtc");

                    b.Property<string>("PlaybackSessionId");

                    b.Property<DateTime?>("ResumedUtc");

                    b.Property<string>("SpotifySongUri")
                        .IsRequired();

                    b.Property<DateTime>("StartedUtc");

                    b.Property<string>("State")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PlaybackSessionId");

                    b.ToTable("SongPlaybackTrackers");
                });

            modelBuilder.Entity("Synthbot.DAL.Models.SynthbotUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ActivePlaybackSessionId");

                    b.Property<bool>("AutoJoin");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DefaultSpotifyDevice");

                    b.Property<string>("DiscordUserId")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ActivePlaybackSessionId");

                    b.HasIndex("DiscordUserId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("SynthbotUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Synthbot.DAL.Models.SynthbotUser")
                        .WithMany("UserClaims")
                        .HasForeignKey("SynthbotUserId");

                    b.HasOne("Synthbot.DAL.Models.SynthbotUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Synthbot.DAL.Models.SynthbotUser")
                        .WithMany("UserLogins")
                        .HasForeignKey("SynthbotUserId");

                    b.HasOne("Synthbot.DAL.Models.SynthbotUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Synthbot.DAL.Models.SynthbotUser")
                        .WithMany("UserTokens")
                        .HasForeignKey("SynthbotUserId");

                    b.HasOne("Synthbot.DAL.Models.SynthbotUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Synthbot.DAL.Models.PlaybackSession", b =>
                {
                    b.HasOne("Synthbot.DAL.Models.SongPlaybackTracker", "CurrentSongPlayback")
                        .WithMany()
                        .HasForeignKey("CurrentSongPlaybackId");
                });

            modelBuilder.Entity("Synthbot.DAL.Models.ReferralTokenReceipt", b =>
                {
                    b.HasOne("Synthbot.DAL.Models.SynthbotUser", "SynthbotUser")
                        .WithMany()
                        .HasForeignKey("SynthbotUserId");
                });

            modelBuilder.Entity("Synthbot.DAL.Models.SongPlaybackTracker", b =>
                {
                    b.HasOne("Synthbot.DAL.Models.PlaybackSession", "PlaybackSession")
                        .WithMany("SongPlaybacks")
                        .HasForeignKey("PlaybackSessionId");
                });

            modelBuilder.Entity("Synthbot.DAL.Models.SynthbotUser", b =>
                {
                    b.HasOne("Synthbot.DAL.Models.PlaybackSession", "ActivePlaybackSession")
                        .WithMany("JoinedUsers")
                        .HasForeignKey("ActivePlaybackSessionId");

                    b.HasOne("Synthbot.DAL.Models.DiscordUser", "DiscordUser")
                        .WithOne("SynthbotUser")
                        .HasForeignKey("Synthbot.DAL.Models.SynthbotUser", "DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
